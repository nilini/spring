1、spring中的bean和传统的javaBean的区别？
Spring中的Bean是java实例、java组件；而传统Java应用中的JavaBean通常作为DTO（数据传输对象），用来封装对象，在各层之间传输数据。
Spring中的Bean比JavaBean的功能要复杂，用法也更丰富。创痛JavaBaen可以作为Sprign的Bean，从而接受Spring管理。
传统的JavaBean作为值对象，要求每个属性都提供getter和setter方法；但Spring的Bean只需为接受设值注入的属性提供setter方法即可。
传统的JavaBean不接受任何容器管理其生命周期；Spring中的Bean由Spring管理其生命周期行为。

2、创建Bean的三种方式
  调用构造器创建Bean
  调用静态工厂方法创建Bean
        class属性的值不再是Bean实例的实现类，而是生成Bean实例的静态工厂类。
        使用factory-method属性指定创建Bean实例的静态工厂方法。
        如果静态工厂方法需要参数，则使用<constructor-arg.../>元素指定静态工厂方法的参数。
  调用实例工厂方法创建Bean
        配置实例工厂方法创建Bean，必须将实例工厂配置成Bean实例；而配置静态工厂方法创建Bean,则无须配置工厂Bean。
        配置实例工厂方法创建Bean，必须使用factory-bean属性确定工厂Bean；而配置静态工厂方法创建Bean，则使用class元素确定静态工厂类。
3、容器中的工厂Bean
      实例工厂方法、静态工厂方法都是标准的工厂模式，Spring只是负责调用工厂方法来创建Bean实例。
      此处的工厂Bean是Spring的一种特殊Bean，必须实现FactoryBean接口。
      通过getBean()方法获取的不是FactoryBean实现类的实例，而是FactoryBean的产品（getObject()方法的返回值）。
      通过getBean("&{bean的id}")获取FactoryBean实现类的实例。