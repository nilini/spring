1、spring中的bean和传统的javaBean的区别？
Spring中的Bean是java实例、java组件；而传统Java应用中的JavaBean通常作为DTO（数据传输对象），用来封装对象，在各层之间传输数据。
Spring中的Bean比JavaBean的功能要复杂，用法也更丰富。创痛JavaBaen可以作为Sprign的Bean，从而接受Spring管理。
传统的JavaBean作为值对象，要求每个属性都提供getter和setter方法；但Spring的Bean只需为接受设值注入的属性提供setter方法即可。
传统的JavaBean不接受任何容器管理其生命周期；Spring中的Bean由Spring管理其生命周期行为。

2、创建Bean的三种方式
  调用构造器创建Bean
  调用静态工厂方法创建Bean
        class属性的值不再是Bean实例的实现类，而是生成Bean实例的静态工厂类。
        使用factory-method属性指定创建Bean实例的静态工厂方法。
        如果静态工厂方法需要参数，则使用<constructor-arg.../>元素指定静态工厂方法的参数。
  调用实例工厂方法创建Bean
        配置实例工厂方法创建Bean，必须将实例工厂配置成Bean实例；而配置静态工厂方法创建Bean,则无须配置工厂Bean。
        配置实例工厂方法创建Bean，必须使用factory-bean属性确定工厂Bean；而配置静态工厂方法创建Bean，则使用class元素确定静态工厂类。
3、容器中的工厂Bean
      实例工厂方法、静态工厂方法都是标准的工厂模式，Spring只是负责调用工厂方法来创建Bean实例。
      此处的工厂Bean是Spring的一种特殊Bean，必须实现FactoryBean接口。
      通过getBean()方法获取的不是FactoryBean实现类的实例，而是FactoryBean的产品（getObject()方法的返回值）。
      通过getBean("&{bean的id}")获取FactoryBean实现类的实例。
4、容器中Bean的生命周期
      singleton：Spring可以管理singleton作用域的Bean的生命周期。每次请求都返回同一个共享实例。
      prototype：Spring容器仅仅负责创建，每次请求都会重新创建。
      管理生命周期：
            注入依赖关系之后：使用init-method属性或实现InitializingBean接口
            即将销毁Bean之前：使用destory-method属性或实现DispsableBean接口
            default-init-method和default-destory-method可用于<beans.../>
5、协调作用域不同步的Bean
      使用lookup-method属性
6、获取其他Bean的属性值
      PropertyPathFactoryBean用来获取目标Bean的属性值（getter方法的返回值），获得的值可注入给其他Bean，
      也可以直接定义成新的Bean。
7、Bean之间的依赖关系配置
      开发者在Spring配置文件中使用XML元素进行配置，实际驱动Spring执行相应的代码。
      调用构造器创建对象（包括使用工厂方法创建对象），使用<bean.../>元素。
      调用setter方法，用<property.../>元素。
      调用getter方法，使用PropertyPathFactoryBean或<util:property-path.../>元素。
      调用普通的方法，使用MethodInvokingFactoryBean工厂Bean。
      获取Field的值，使用FieldRetrievingFactoryBean或<util:constant.../>元素。
8、Bean后处理器
      是一种特殊的Bean，负责对容器中其他Bean执行后处理。
      实现BeanPostProcessor接口，两个方法：postProcessBeforeInitialization和postProcessAfterInitialization。
      接口InitializingBean提供afterPropertiesSet方法。
      加载顺序：postProcessBeforeInitialization -> afterPropertiesSet -> init-method -> postProcessAfterInitialization
      如果使用BeanFactory最为Spring容器，则必须手动注册Bean后处理器。
9、容器后处理器
      负责处理容器本身。
      实现BeanFactoryPostProcessor接口。
      ApplicationContext会自动将实现了BeanFactoryPostProcessor接口的Bean注册为容器后实现器。
10、常见容器后处理器
      PropertyPlaceholderConfigurer：属性占位符配置器。
      PropertyOverrideConfigurer：重写占位符配置器。
      CustomAutowrieConfigurer：自定义自动装配的配置器。
      CustomScopeConfigurer：自定义作用域的配置器。
      容器后处理器通常用于对Spring容器进行处理，在容器实例化其他的Bean之前。
      可配置多个容器后处理器。设置order属性控制容器后处理器的执行次序。
11、Resource接口
      UrlResource：访问网络资源的实现类。
      ClassPathResource：访问类加载路径里资源的实现类。
      FileSystemResource：访问文件系统里资源的实现类。
      ServletContextResource：访问相对于ServletContext路径下的资源的实现类。
      InputStreamResource：访问输入流资源的实现类。
      ByteArrayResource：访问字节数组资源的实现类。